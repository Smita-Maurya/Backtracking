#include <bits/stdc++.h>
using namespace std;
int n = 9;
bool isEmpty(int board[9][9], int &row, int &col) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (board[i][j] == 0) {
        row = i;
        col = j;
        return true;
      }
    }
  }
  return false;
}
bool vertical(int board[9][9], int row, int col, int value) {
  for (int i = 0; i < n; i++)
    if (board[i][col] == value)
      return false;
  return true;
}
bool horizontal(int board[9][9], int row, int col, int value) {
  for (int i = 0; i < n; i++)
    if (board[row][i] == value)
      return false;
  return true;
}
bool box(int board[9][9], int row, int col, int value) {
  int row_factor = row - (row % 3);
  int col_factor = col - (col % 3);
  for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++)
      if (board[i + row_factor][j + col_factor] == value)
        return false;
  return true;
}
bool checker(int board[9][9], int value, int row, int col) {
  if (vertical(board, row, col, value) && horizontal(board, row, col, value) &&
      box(board, row, col, value))
    return true;
  return false;
}
bool solveSudoku(int board[9][9]) {
  int row = 0, col = 0;
  if (!isEmpty(board, row, col))
    return true;
  for (int i = 1; i <= n; i++) {
    if (checker(board, i, row, col)) {
      board[row][col] = i;
      if (solveSudoku(board))
        return true;
      else
        board[row][col] = 0;
    }
  }
  return false;
}
int main() {
   
  int board[9][9];
  for (int i = 0; i < 9; i++)
    for (int j = 0; j < 9; j++)
      cin >> board[i][j];
  if (solveSudoku(board))
    cout << "true";
  else
    cout << "false";
  return 0;
}
